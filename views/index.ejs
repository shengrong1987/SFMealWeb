<!DOCTYPE html>
<html style="font-size: 62.5%;">
<head>
  <title><%= __('welcome')%></title>

  <!-- Viewport mobile tag for sensible mobile support -->
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">


  <!--
      Stylesheets and Preprocessors
      ==============================

      You can always bring in CSS files manually with `<link>` tags, or asynchronously
      using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
      of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, stylesheets from your `assets/styles` folder are included
      here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
      are supported. In production, your styles will be minified and concatenated into
      a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your CSS files
          + Import stylesheets from other directories
          + Use a different or additional preprocessor, like SASS, SCSS or Stylus
  -->

  <link rel="icon" href="/favicon.ico" type="image/x-icon">
  <link rel="stylesheet" href="/styles/home-css/component.css">
  <link rel="stylesheet" href="/styles/home-css/base.css">
  <link rel="stylesheet" href="/styles/home-css/slick-theme.css">
  <link rel="stylesheet" href="/styles/home-css/slick.css">
  <link rel="stylesheet" href="/styles/home-css/sp.css">
  <link rel="stylesheet" href="/styles/home-css/top.css">
  <link rel="stylesheet" href="/styles/home-css/uniq.css">
  <link rel="stylesheet" href="/styles/home-css/www-player-2x-webp-vflKKub0K.css">
  <link rel="stylesheet" href="/styles/home-css/yakuhanjp.min.css">
  <script src="/js/dependencies/jquery/jquery-2.1.4.min.js"></script>

  <!--TEMPLATES-->
  
  <!--TEMPLATES END-->


  <!--<script type="text/javascript" async src="https://cdn.jsdelivr.net/npm/lodash@4.17.4/lodash.min.js"></script>-->
  <script>
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
        (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-90950313-1', 'auto');
    ga('send', 'pageview');
  </script>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <title>Overexposure - Slider Revolution</title>
  <meta name="description" content="Slider Revolution Example" />
  <meta name="keywords" content="fullscreen image, grid layout, flexbox grid, transition" />
  <meta name="author" content="ThemePunch" />
  <meta name="viewport" content="width=device-width, initial-scale=1">

</head>

<body>

<div class="device-xs d-block d-sm-none"></div>
<div class="device-sm d-none d-sm-block d-md-none"></div>
<div class="device-md d-none d-md-block d-lg-none"></div>
<div class="device-lg d-none d-lg-block d-xl-none"></div>
<div class="device-xl d-none d-xl-block"></div>

<%- body %>

<div class="modal fade" id="myModal" role="dialog">
  <div class="modal-dialog">

    <!-- Modal content-->
    <div class="modal-content"></div>
  </div>
</div>

<div class="modal-loading"><!-- Place at bottom of page --></div>
<div id="placeServiceHelper"></div>



<!--
    Client-side Templates
    ========================

    HTML templates are important prerequisites of modern, rich client applications.
    To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
    that you load these templates client-side.

    By default, your Gruntfile is configured to automatically load and precompile
    client-side JST templates in your `assets/templates` folder, then
    include them here automatically (between TEMPLATES and TEMPLATES END).

    To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
    For example, here are a few things you could do:

        + Import templates from other directories
        + Use a different template engine (handlebars, jade, dust, etc.)
        + Internationalize your client-side templates using a server-side
          stringfile before they're served.
-->




<!--

  Client-side Javascript
  ========================

  You can always bring in JS files manually with `script` tags, or asynchronously
  on the client using a solution like AMD (RequireJS).  Or, if you like, you can
  take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

  By default, files in your `assets/js` folder are included here
  automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
  CoffeeScript (.coffee) are supported. In production, your scripts will be minified
  and concatenated into a single file.

  To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
  For example, here are a few things you could do:

      + Change the order of your scripts
      + Import scripts from other directories
      + Use a different preprocessor, like TypeScript

-->


</body>
</html>
 preprocessor, like TypeScript

-->


</body>
</html>
